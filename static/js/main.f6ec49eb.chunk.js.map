{"version":3,"sources":["serviceWorker.ts","containers/Header.tsx","containers/Footer.tsx","pages/LandingPage.tsx","components/Card.tsx","pages/CategoryPage.tsx","pages/CategoryDetail.tsx","routes/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Header","renderBranch","branches","map","branch","to","dealers_id","branch_id","name","className","href","myCatalog","data","locations","Footer","LandingPage","Card","props","link","src","imageSrc","alt","style","width","CategoriesPage","query","URLSearchParams","useLocation","search","display","selectedLocationId","get","selectedBranchId","find","branchItem","categories","category","image","renderCategories","CategoriesDetail","selectedCategory","subcategories","subcategory","AppRoutes","exact","path","component","CategoryPage","CategoryDetail","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6ec49eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\r\nimport \"../styles/containers/Header.css\";\r\nimport myCatalog from \"../catalog.json\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header() {\r\n  const renderLocation = () => {\r\n    const locations = myCatalog.data.locations;\r\n\r\n    return locations.map((location) => {\r\n      return (\r\n        <li>\r\n          <a href=\"#\">{location.name}</a>\r\n          <ul>{renderBranch(location)}</ul>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderBranch = (location: any) => {\r\n    return location.branches.map((branch: any) => {\r\n      return (\r\n        <li>\r\n          <Link\r\n            to={`/category?location=${location.dealers_id}&branch_id=${branch.branch_id}`}\r\n          >\r\n            {branch.name}\r\n          </Link>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <h2>RENTAL MANAGEMENT SYSTEM</h2>\r\n      </div>\r\n      <ul className=\"nav\">\r\n        <li>\r\n          <a href=\"#\">Select Location</a>\r\n          <ul>{renderLocation()}</ul>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport \"../styles/containers/Footer.css\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <h2>Developed by @ravibasil </h2>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport \"../styles/pages/LandingPage.css\";\r\n\r\nexport default function LandingPage() {\r\n  return (\r\n    <div className=\"LandingPage\">\r\n      <h2> WELCOME TO RENTAL MANGEMENT SYSTEM </h2>\r\n      <span>Please select Location</span>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport \"../styles/component/Card.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Card(props: any) {\r\n  return (\r\n    <Link to={props.link}>\r\n      <div className=\"card\">\r\n        <img src={props.imageSrc} alt=\"Avatar\" style={{ width: \"100%\" }} />\r\n        <div className=\"container\">\r\n          <h4>\r\n            <b>{props.name}</b>\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport myCatalog from \"../catalog.json\";\r\nimport Card from \"../components/Card\";\r\n\r\nexport default function CategoriesPage(props: any) {\r\n  let query = useQuery();\r\n\r\n  const renderCategories = () => {\r\n    const selectedLocationId = query.get(\"location\");\r\n    const selectedBranchId = query.get(\"branch_id\");\r\n\r\n    const location = myCatalog.data.locations.find(\r\n      (location) => location.dealers_id === selectedLocationId\r\n    );\r\n    const branch = location?.branches.find(\r\n      (branchItem: any) => branchItem.branch_id === selectedBranchId\r\n    );\r\n\r\n    return branch?.categories.map((category) => (\r\n      <Card\r\n        imageSrc={`/assets/category/${category.image}`}\r\n        name={category.name}\r\n        link={`/category-detail?location=${selectedLocationId}&branch_id=${selectedBranchId}&category=${category.name}`}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return <div style={{ display: \"flex\" }}>{renderCategories()}</div>;\r\n}\r\n\r\n// A custom hook that builds on useLocation to parse\r\n// the query string for you.\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import * as React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport myCatalog from \"../catalog.json\";\r\nimport Card from \"../components/Card\";\r\n\r\nexport default function CategoriesDetail(props: any) {\r\n  let query = useQuery();\r\n\r\n  const renderCategories = () => {\r\n    const selectedLocationId = query.get(\"location\");\r\n    const selectedBranchId = query.get(\"branch_id\");\r\n    const selectedCategory = query.get(\"category\");\r\n\r\n    const location = myCatalog.data.locations.find(\r\n      (location) => location.dealers_id === selectedLocationId\r\n    );\r\n    const branch = location?.branches.find(\r\n      (branchItem: any) => branchItem.branch_id === selectedBranchId\r\n    );\r\n    const category = branch?.categories.find(\r\n      (category: any) => category.name === selectedCategory\r\n    );\r\n\r\n    return category?.subcategories.map((subcategory) => (\r\n      <Card\r\n        imageSrc={`/assets/category/subcategory/${subcategory.image}`}\r\n        name={subcategory.name}\r\n        link={``}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return <div style={{ display: \"flex\" }}>{renderCategories()}</div>;\r\n}\r\n\r\n// A custom hook that builds on useLocation to parse\r\n// the query string for you.\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import * as React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Header from \"../containers/Header\";\r\nimport Footer from \"../containers/Footer\";\r\nimport LandingPage from \"../pages/LandingPage\";\r\nimport CategoryPage from \"../pages/CategoryPage\";\r\nimport CategoryDetail from \"../pages/CategoryDetail\";\r\n\r\nexport default function AppRoutes() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LandingPage}></Route>\r\n          <Route path=\"/category\" component={CategoryPage}></Route>\r\n          <Route path=\"/category-detail\" component={CategoryDetail}></Route>\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppRoutes from './routes';\n\n\nReactDOM.render(\n    <AppRoutes/>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}